plugins {
    kotlin("multiplatform")
    id("com.android.library")
    id("com.google.devtools.ksp")
}

kotlin {
    android()
    
    listOf(
        iosX64(),
        iosArm64(),
        iosSimulatorArm64()
    ).forEach {
        it.binaries.framework {
            baseName = "shared"
        }
    }

    sourceSets {
        val commonMain by getting {
            dependencies {
                implementation("me.tatarka.inject:kotlin-inject-runtime:0.5.1")
            }
        }
        val commonTest by getting {
            dependencies {
                implementation(kotlin("test"))
            }
        }
        val androidMain by getting
        val androidTest by getting
        val iosX64Main by getting
        val iosArm64Main by getting
        val iosSimulatorArm64Main by getting
        val iosMain by creating {
            dependsOn(commonMain)
            iosX64Main.dependsOn(this)
            iosArm64Main.dependsOn(this)
            iosSimulatorArm64Main.dependsOn(this)

            // Choose one of the generated targets to be used in the common source-set
            // Here I'm using iOS x64, but you can choose anyone you want that inherits
            // from this source-set
            kotlin.srcDir("build/generated/ksp/iosX64/iosX64Main/kotlin")
        }
        val iosX64Test by getting
        val iosArm64Test by getting
        val iosSimulatorArm64Test by getting
        val iosTest by creating {
            dependsOn(commonTest)
            iosX64Test.dependsOn(this)
            iosArm64Test.dependsOn(this)
            iosSimulatorArm64Test.dependsOn(this)
        }
    }

    // Currently the code generated by KSP isn't automatically picked up so we have to manually add it to the source set
    // https://github.com/google/ksp/issues/965
    // https://github.com/evant/kotlin-inject/issues/193
    targets.configureEach {
        // Skip adding native targets here because we're adding it manually to the shared source below
        if (platformType == org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType.native) return@configureEach
        compilations.configureEach {
            kotlinSourceSets.forEach { sourceSet ->
                sourceSet.kotlin.srcDir("build/generated/ksp/$targetName/${sourceSet.name}/kotlin")
            }
        }
    }


    // Link the build step to generate linked source-sets for other targets
    // Here, only linking on othes iOS compile tasks
    tasks.withType<org.jetbrains.kotlin.gradle.dsl.KotlinCompile<*>>().all {
        if (name.startsWith("compileKotlinIos") && name != "compileKotlinIosX64") {
            dependsOn("compileKotlinIosX64")
        }
    }
}

dependencies {
    // KSP will eventually have better multiplatform support and we'll be able to simply have
    // `ksp libs.kotlinInject.compiler` in the dependencies block of each source set
    // https://github.com/google/ksp/pull/1021
    add("kspAndroid", "me.tatarka.inject:kotlin-inject-compiler-ksp:0.5.1")
    add("kspIosX64", "me.tatarka.inject:kotlin-inject-compiler-ksp:0.5.1")

    // Removed other targets to avoid conflicts
//    add("kspIosArm64", "me.tatarka.inject:kotlin-inject-compiler-ksp:0.5.1")
//    add("kspIosSimulatorArm64", "me.tatarka.inject:kotlin-inject-compiler-ksp:0.5.1")
}

android {
    namespace = "com.fredporciuncula.ksp"
    compileSdk = 32
    defaultConfig {
        minSdk = 26
        targetSdk = 32
    }
}